{"version":3,"file":"ArrayUnique.js","sourceRoot":"","sources":["../../../../src/decorator/array/ArrayUnique.ts"],"names":[],"mappings":";;;AACA,qDAAgE;AAEnD,QAAA,YAAY,GAAG,aAAa,CAAC;AAG1C;;;GAGG;AACH,SAAgB,WAAW,CAAC,KAAgB,EAAE,UAAkC;IAC9E,IAAI,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC;QAAE,OAAO,KAAK,CAAC;IAE5C,IAAI,UAAU,EAAE;QACd,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACzD;IAED,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IAClE,OAAO,KAAK,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,CAAC;AAC7C,CAAC;AATD,kCASC;AAED;;;GAGG;AACH,SAAgB,WAAW,CACzB,mBAAkE,EAClE,iBAAqC;IAErC,MAAM,UAAU,GAAG,OAAO,mBAAmB,KAAK,UAAU,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,SAAS,CAAC;IAC/F,MAAM,OAAO,GAAG,OAAO,mBAAmB,KAAK,UAAU,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,iBAAiB,CAAC;IAEpG,OAAO,uBAAU,CACf;QACE,IAAI,EAAE,oBAAY;QAClB,SAAS,EAAE;YACT,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,EAAW,EAAE,CAAC,WAAW,CAAC,KAAK,EAAE,UAAU,CAAC;YAClE,cAAc,EAAE,yBAAY,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,GAAG,yCAAyC,EAAE,OAAO,CAAC;SAC5G;KACF,EACD,OAAO,CACR,CAAC;AACJ,CAAC;AAjBD,kCAiBC","sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\r\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\r\n\r\nexport const ARRAY_UNIQUE = 'arrayUnique';\r\nexport type ArrayUniqueIdentifier<T = any> = (o: T) => any;\r\n\r\n/**\r\n * Checks if all array's values are unique. Comparison for objects is reference-based.\r\n * If null or undefined is given then this function returns false.\r\n */\r\nexport function arrayUnique(array: unknown[], identifier?: ArrayUniqueIdentifier): boolean {\r\n  if (!(array instanceof Array)) return false;\r\n\r\n  if (identifier) {\r\n    array = array.map(o => (o != null ? identifier(o) : o));\r\n  }\r\n\r\n  const uniqueItems = array.filter((a, b, c) => c.indexOf(a) === b);\r\n  return array.length === uniqueItems.length;\r\n}\r\n\r\n/**\r\n * Checks if all array's values are unique. Comparison for objects is reference-based.\r\n * If null or undefined is given then this function returns false.\r\n */\r\nexport function ArrayUnique<T = any>(\r\n  identifierOrOptions?: ArrayUniqueIdentifier<T> | ValidationOptions,\r\n  validationOptions?: ValidationOptions\r\n): PropertyDecorator {\r\n  const identifier = typeof identifierOrOptions === 'function' ? identifierOrOptions : undefined;\r\n  const options = typeof identifierOrOptions !== 'function' ? identifierOrOptions : validationOptions;\r\n\r\n  return ValidateBy(\r\n    {\r\n      name: ARRAY_UNIQUE,\r\n      validator: {\r\n        validate: (value, args): boolean => arrayUnique(value, identifier),\r\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + \"All $property's elements must be unique\", options),\r\n      },\r\n    },\r\n    options\r\n  );\r\n}\r\n"]}