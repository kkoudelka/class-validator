{"version":3,"file":"Allow.js","sourceRoot":"","sources":["../../../../src/decorator/common/Allow.ts"],"names":[],"mappings":";;;AAEA,sEAAmE;AACnE,0EAAuE;AACvE,oEAAoE;AAEpE;;GAEG;AACH,SAAgB,KAAK,CAAC,iBAAqC;IACzD,OAAO,UAAU,MAAc,EAAE,YAAoB;QACnD,MAAM,IAAI,GAA2B;YACnC,IAAI,EAAE,iCAAe,CAAC,SAAS;YAC/B,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,iBAAiB,EAAE,iBAAiB;SACrC,CAAC;QACF,oCAAkB,EAAE,CAAC,qBAAqB,CAAC,IAAI,uCAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3E,CAAC,CAAC;AACJ,CAAC;AAVD,sBAUC","sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\r\nimport { ValidationMetadataArgs } from '../../metadata/ValidationMetadataArgs';\r\nimport { ValidationTypes } from '../../validation/ValidationTypes';\r\nimport { ValidationMetadata } from '../../metadata/ValidationMetadata';\r\nimport { getMetadataStorage } from '../../metadata/MetadataStorage';\r\n\r\n/**\r\n * If object has both allowed and not allowed properties a validation error will be thrown.\r\n */\r\nexport function Allow(validationOptions?: ValidationOptions): PropertyDecorator {\r\n  return function (object: object, propertyName: string): void {\r\n    const args: ValidationMetadataArgs = {\r\n      type: ValidationTypes.WHITELIST,\r\n      target: object.constructor,\r\n      propertyName: propertyName,\r\n      validationOptions: validationOptions,\r\n    };\r\n    getMetadataStorage().addValidationMetadata(new ValidationMetadata(args));\r\n  };\r\n}\r\n"]}