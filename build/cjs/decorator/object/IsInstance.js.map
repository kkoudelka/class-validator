{"version":3,"file":"IsInstance.js","sourceRoot":"","sources":["../../../../src/decorator/object/IsInstance.ts"],"names":[],"mappings":";;;AACA,qDAAgE;AAEnD,QAAA,WAAW,GAAG,YAAY,CAAC;AAExC;;GAEG;AACH,SAAgB,UAAU,CAAC,MAAe,EAAE,qBAAkD;IAC5F,OAAO,CACL,qBAAqB,IAAI,OAAO,qBAAqB,KAAK,UAAU,IAAI,MAAM,YAAY,qBAAqB,CAChH,CAAC;AACJ,CAAC;AAJD,gCAIC;AAED;;GAEG;AACH,SAAgB,UAAU,CACxB,UAAuC,EACvC,iBAAqC;IAErC,OAAO,uBAAU,CACf;QACE,IAAI,EAAE,mBAAW;QACjB,WAAW,EAAE,CAAC,UAAU,CAAC;QACzB,SAAS,EAAE;YACT,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,EAAW,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC1E,cAAc,EAAE,yBAAY,CAAC,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE;gBAChD,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE;oBACvB,OAAO,UAAU,GAAG,oCAAoC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAc,EAAE,CAAC;iBAC9F;qBAAM;oBACL,OAAO,UAAU,GAAG,GAAG,mBAAW,8DAA8D,CAAC;iBAClG;YACH,CAAC,EAAE,iBAAiB,CAAC;SACtB;KACF,EACD,iBAAiB,CAClB,CAAC;AACJ,CAAC;AArBD,gCAqBC","sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\r\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\r\n\r\nexport const IS_INSTANCE = 'isInstance';\r\n\r\n/**\r\n * Checks if the value is an instance of the specified object.\r\n */\r\nexport function isInstance(object: unknown, targetTypeConstructor: new (...args: any[]) => any): boolean {\r\n  return (\r\n    targetTypeConstructor && typeof targetTypeConstructor === 'function' && object instanceof targetTypeConstructor\r\n  );\r\n}\r\n\r\n/**\r\n * Checks if the value is an instance of the specified object.\r\n */\r\nexport function IsInstance(\r\n  targetType: new (...args: any[]) => any,\r\n  validationOptions?: ValidationOptions\r\n): PropertyDecorator {\r\n  return ValidateBy(\r\n    {\r\n      name: IS_INSTANCE,\r\n      constraints: [targetType],\r\n      validator: {\r\n        validate: (value, args): boolean => isInstance(value, args.constraints[0]),\r\n        defaultMessage: buildMessage((eachPrefix, args) => {\r\n          if (args.constraints[0]) {\r\n            return eachPrefix + `$property must be an instance of ${args.constraints[0].name as string}`;\r\n          } else {\r\n            return eachPrefix + `${IS_INSTANCE} decorator expects and object as value, but got falsy value.`;\r\n          }\r\n        }, validationOptions),\r\n      },\r\n    },\r\n    validationOptions\r\n  );\r\n}\r\n"]}