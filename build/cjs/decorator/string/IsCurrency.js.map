{"version":3,"file":"IsCurrency.js","sourceRoot":"","sources":["../../../../src/decorator/string/IsCurrency.ts"],"names":[],"mappings":";;;;;;AACA,qDAAgE;AAChE,0EAA2D;AAG9C,QAAA,WAAW,GAAG,YAAY,CAAC;AAExC;;;GAGG;AACH,SAAgB,UAAU,CAAC,KAAc,EAAE,OAAuC;IAChF,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,oBAAmB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AAC1E,CAAC;AAFD,gCAEC;AAED;;;GAGG;AACH,SAAgB,UAAU,CACxB,OAAuC,EACvC,iBAAqC;IAErC,OAAO,uBAAU,CACf;QACE,IAAI,EAAE,mBAAW;QACjB,WAAW,EAAE,CAAC,OAAO,CAAC;QACtB,SAAS,EAAE;YACT,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,EAAW,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC1E,cAAc,EAAE,yBAAY,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,GAAG,8BAA8B,EAAE,iBAAiB,CAAC;SAC3G;KACF,EACD,iBAAiB,CAClB,CAAC;AACJ,CAAC;AAfD,gCAeC","sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\r\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\r\nimport isCurrencyValidator from 'validator/lib/isCurrency';\r\nimport ValidatorJS from 'validator';\r\n\r\nexport const IS_CURRENCY = 'isCurrency';\r\n\r\n/**\r\n * Checks if the string is a valid currency amount.\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function isCurrency(value: unknown, options?: ValidatorJS.IsCurrencyOptions): boolean {\r\n  return typeof value === 'string' && isCurrencyValidator(value, options);\r\n}\r\n\r\n/**\r\n * Checks if the string is a valid currency amount.\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function IsCurrency(\r\n  options?: ValidatorJS.IsCurrencyOptions,\r\n  validationOptions?: ValidationOptions\r\n): PropertyDecorator {\r\n  return ValidateBy(\r\n    {\r\n      name: IS_CURRENCY,\r\n      constraints: [options],\r\n      validator: {\r\n        validate: (value, args): boolean => isCurrency(value, args.constraints[0]),\r\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a currency', validationOptions),\r\n      },\r\n    },\r\n    validationOptions\r\n  );\r\n}\r\n"]}