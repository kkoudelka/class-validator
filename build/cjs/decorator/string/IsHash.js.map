{"version":3,"file":"IsHash.js","sourceRoot":"","sources":["../../../../src/decorator/string/IsHash.ts"],"names":[],"mappings":";;;;;;AACA,qDAAgE;AAChE,kEAAmD;AAGtC,QAAA,OAAO,GAAG,QAAQ,CAAC;AAEhC;;;;GAIG;AACH,SAAgB,MAAM,CAAC,KAAc,EAAE,SAAoC;IACzE,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,gBAAe,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;AACxE,CAAC;AAFD,wBAEC;AAED;;;;GAIG;AACH,SAAgB,MAAM,CAAC,SAAiB,EAAE,iBAAqC;IAC7E,OAAO,uBAAU,CACf;QACE,IAAI,EAAE,eAAO;QACb,WAAW,EAAE,CAAC,SAAS,CAAC;QACxB,SAAS,EAAE;YACT,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,EAAW,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACtE,cAAc,EAAE,yBAAY,CAC1B,UAAU,CAAC,EAAE,CAAC,UAAU,GAAG,+CAA+C,EAC1E,iBAAiB,CAClB;SACF;KACF,EACD,iBAAiB,CAClB,CAAC;AACJ,CAAC;AAfD,wBAeC","sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\r\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\r\nimport isHashValidator from 'validator/lib/isHash';\r\nimport ValidatorJS from 'validator';\r\n\r\nexport const IS_HASH = 'isHash';\r\n\r\n/**\r\n * Check if the string is a hash of type algorithm.\r\n * Algorithm is one of ['md4', 'md5', 'sha1', 'sha256', 'sha384', 'sha512', 'ripemd128', 'ripemd160', 'tiger128',\r\n * 'tiger160', 'tiger192', 'crc32', 'crc32b']\r\n */\r\nexport function isHash(value: unknown, algorithm: ValidatorJS.HashAlgorithm): boolean {\r\n  return typeof value === 'string' && isHashValidator(value, algorithm);\r\n}\r\n\r\n/**\r\n * Check if the string is a hash of type algorithm.\r\n * Algorithm is one of ['md4', 'md5', 'sha1', 'sha256', 'sha384', 'sha512', 'ripemd128', 'ripemd160', 'tiger128',\r\n * 'tiger160', 'tiger192', 'crc32', 'crc32b']\r\n */\r\nexport function IsHash(algorithm: string, validationOptions?: ValidationOptions): PropertyDecorator {\r\n  return ValidateBy(\r\n    {\r\n      name: IS_HASH,\r\n      constraints: [algorithm],\r\n      validator: {\r\n        validate: (value, args): boolean => isHash(value, args.constraints[0]),\r\n        defaultMessage: buildMessage(\r\n          eachPrefix => eachPrefix + '$property must be a hash of type $constraint1',\r\n          validationOptions\r\n        ),\r\n      },\r\n    },\r\n    validationOptions\r\n  );\r\n}\r\n"]}