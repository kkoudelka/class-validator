{"version":3,"file":"IsISO8601.js","sourceRoot":"","sources":["../../../../src/decorator/string/IsISO8601.ts"],"names":[],"mappings":";;;;;;AACA,qDAAgE;AAChE,wEAAyD;AAG5C,QAAA,UAAU,GAAG,WAAW,CAAC;AAEtC;;;;GAIG;AACH,SAAgB,SAAS,CAAC,KAAc,EAAE,OAAsC;IAC9E,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,mBAAkB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AACzE,CAAC;AAFD,8BAEC;AAED;;;;GAIG;AACH,SAAgB,SAAS,CACvB,OAAsC,EACtC,iBAAqC;IAErC,OAAO,uBAAU,CACf;QACE,IAAI,EAAE,kBAAU;QAChB,WAAW,EAAE,CAAC,OAAO,CAAC;QACtB,SAAS,EAAE;YACT,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,EAAW,EAAE,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACzE,cAAc,EAAE,yBAAY,CAC1B,UAAU,CAAC,EAAE,CAAC,UAAU,GAAG,gDAAgD,EAC3E,iBAAiB,CAClB;SACF;KACF,EACD,iBAAiB,CAClB,CAAC;AACJ,CAAC;AAlBD,8BAkBC","sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\r\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\r\nimport isIso8601Validator from 'validator/lib/isISO8601';\r\nimport ValidatorJS from 'validator';\r\n\r\nexport const IS_ISO8601 = 'isIso8601';\r\n\r\n/**\r\n * Checks if the string is a valid ISO 8601 date.\r\n * If given value is not a string, then it returns false.\r\n * Use the option strict = true for additional checks for a valid date, e.g. invalidates dates like 2019-02-29.\r\n */\r\nexport function isISO8601(value: unknown, options?: ValidatorJS.IsISO8601Options): boolean {\r\n  return typeof value === 'string' && isIso8601Validator(value, options);\r\n}\r\n\r\n/**\r\n * Checks if the string is a valid ISO 8601 date.\r\n * If given value is not a string, then it returns false.\r\n * Use the option strict = true for additional checks for a valid date, e.g. invalidates dates like 2019-02-29.\r\n */\r\nexport function IsISO8601(\r\n  options?: ValidatorJS.IsISO8601Options,\r\n  validationOptions?: ValidationOptions\r\n): PropertyDecorator {\r\n  return ValidateBy(\r\n    {\r\n      name: IS_ISO8601,\r\n      constraints: [options],\r\n      validator: {\r\n        validate: (value, args): boolean => isISO8601(value, args.constraints[0]),\r\n        defaultMessage: buildMessage(\r\n          eachPrefix => eachPrefix + '$property must be a valid ISO 8601 date string',\r\n          validationOptions\r\n        ),\r\n      },\r\n    },\r\n    validationOptions\r\n  );\r\n}\r\n"]}