{"version":3,"file":"IsIdentityCard.js","sourceRoot":"","sources":["../../../../src/decorator/string/IsIdentityCard.ts"],"names":[],"mappings":";;;;;;AACA,qDAAgE;AAChE,kFAAmE;AAGtD,QAAA,gBAAgB,GAAG,gBAAgB,CAAC;AAEjD;;;;;GAKG;AACH,SAAgB,cAAc,CAAC,KAAc,EAAE,MAAsC;IACnF,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,wBAAuB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AAC7E,CAAC;AAFD,wCAEC;AAED;;;;;GAKG;AACH,SAAgB,cAAc,CAC5B,MAAuC,EACvC,iBAAqC;IAErC,OAAO,uBAAU,CACf;QACE,IAAI,EAAE,wBAAgB;QACtB,WAAW,EAAE,CAAC,MAAM,CAAC;QACrB,SAAS,EAAE;YACT,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,EAAW,EAAE,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC9E,cAAc,EAAE,yBAAY,CAC1B,UAAU,CAAC,EAAE,CAAC,UAAU,GAAG,0CAA0C,EACrE,iBAAiB,CAClB;SACF;KACF,EACD,iBAAiB,CAClB,CAAC;AACJ,CAAC;AAlBD,wCAkBC","sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\r\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\r\nimport isIdentityCardValidator from 'validator/lib/isIdentityCard';\r\nimport ValidatorJS from 'validator';\r\n\r\nexport const IS_IDENTITY_CARD = 'isIdentityCard';\r\n\r\n/**\r\n * Check if the string is a valid identity card code.\r\n * locale is one of ['ES', 'zh-TW', 'he-IL', 'ar-TN'] OR 'any'. If 'any' is used, function will check if any of the locals match.\r\n * Defaults to 'any'.\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function isIdentityCard(value: unknown, locale: ValidatorJS.IdentityCardLocale): boolean {\r\n  return typeof value === 'string' && isIdentityCardValidator(value, locale);\r\n}\r\n\r\n/**\r\n * Check if the string is a valid identity card code.\r\n * locale is one of ['ES', 'zh-TW', 'he-IL', 'ar-TN'] OR 'any'. If 'any' is used, function will check if any of the locals match.\r\n * Defaults to 'any'.\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function IsIdentityCard(\r\n  locale?: ValidatorJS.IdentityCardLocale,\r\n  validationOptions?: ValidationOptions\r\n): PropertyDecorator {\r\n  return ValidateBy(\r\n    {\r\n      name: IS_IDENTITY_CARD,\r\n      constraints: [locale],\r\n      validator: {\r\n        validate: (value, args): boolean => isIdentityCard(value, args.constraints[0]),\r\n        defaultMessage: buildMessage(\r\n          eachPrefix => eachPrefix + '$property must be a identity card number',\r\n          validationOptions\r\n        ),\r\n      },\r\n    },\r\n    validationOptions\r\n  );\r\n}\r\n"]}