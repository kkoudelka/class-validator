{"version":3,"file":"IsJSON.js","sourceRoot":"","sources":["../../../../src/decorator/string/IsJSON.ts"],"names":[],"mappings":";;;;;;AACA,qDAAgE;AAChE,kEAAmD;AAEtC,QAAA,OAAO,GAAG,QAAQ,CAAC;AAEhC;;;GAGG;AACH,SAAgB,MAAM,CAAC,KAAc;IACnC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,gBAAe,CAAC,KAAK,CAAC,CAAC;AAC7D,CAAC;AAFD,wBAEC;AAED;;;GAGG;AACH,SAAgB,MAAM,CAAC,iBAAqC;IAC1D,OAAO,uBAAU,CACf;QACE,IAAI,EAAE,eAAO;QACb,SAAS,EAAE;YACT,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,EAAW,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC;YACjD,cAAc,EAAE,yBAAY,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,GAAG,iCAAiC,EAAE,iBAAiB,CAAC;SAC9G;KACF,EACD,iBAAiB,CAClB,CAAC;AACJ,CAAC;AAXD,wBAWC","sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\r\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\r\nimport isJSONValidator from 'validator/lib/isJSON';\r\n\r\nexport const IS_JSON = 'isJson';\r\n\r\n/**\r\n * Checks if the string is valid JSON (note: uses JSON.parse).\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function isJSON(value: unknown): boolean {\r\n  return typeof value === 'string' && isJSONValidator(value);\r\n}\r\n\r\n/**\r\n * Checks if the string is valid JSON (note: uses JSON.parse).\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function IsJSON(validationOptions?: ValidationOptions): PropertyDecorator {\r\n  return ValidateBy(\r\n    {\r\n      name: IS_JSON,\r\n      validator: {\r\n        validate: (value, args): boolean => isJSON(value),\r\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a json string', validationOptions),\r\n      },\r\n    },\r\n    validationOptions\r\n  );\r\n}\r\n"]}