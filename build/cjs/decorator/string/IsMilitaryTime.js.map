{"version":3,"file":"IsMilitaryTime.js","sourceRoot":"","sources":["../../../../src/decorator/string/IsMilitaryTime.ts"],"names":[],"mappings":";;;;;;AACA,qDAAgE;AAChE,oEAAqD;AAExC,QAAA,gBAAgB,GAAG,gBAAgB,CAAC;AAEjD;;;GAGG;AACH,SAAgB,cAAc,CAAC,KAAc;IAC3C,MAAM,iBAAiB,GAAG,8BAA8B,CAAC;IACzD,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,iBAAgB,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;AACjF,CAAC;AAHD,wCAGC;AAED;;;GAGG;AACH,SAAgB,cAAc,CAAC,iBAAqC;IAClE,OAAO,uBAAU,CACf;QACE,IAAI,EAAE,wBAAgB;QACtB,SAAS,EAAE;YACT,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,EAAW,EAAE,CAAC,cAAc,CAAC,KAAK,CAAC;YACzD,cAAc,EAAE,yBAAY,CAC1B,UAAU,CAAC,EAAE,CAAC,UAAU,GAAG,+EAA+E,EAC1G,iBAAiB,CAClB;SACF;KACF,EACD,iBAAiB,CAClB,CAAC;AACJ,CAAC;AAdD,wCAcC","sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\r\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\r\nimport matchesValidator from 'validator/lib/matches';\r\n\r\nexport const IS_MILITARY_TIME = 'isMilitaryTime';\r\n\r\n/**\r\n * Checks if the string represents a time without a given timezone in the format HH:MM (military)\r\n * If the given value does not match the pattern HH:MM, then it returns false.\r\n */\r\nexport function isMilitaryTime(value: unknown): boolean {\r\n  const militaryTimeRegex = /^([01]\\d|2[0-3]):?([0-5]\\d)$/;\r\n  return typeof value === 'string' && matchesValidator(value, militaryTimeRegex);\r\n}\r\n\r\n/**\r\n * Checks if the string represents a time without a given timezone in the format HH:MM (military)\r\n * If the given value does not match the pattern HH:MM, then it returns false.\r\n */\r\nexport function IsMilitaryTime(validationOptions?: ValidationOptions): PropertyDecorator {\r\n  return ValidateBy(\r\n    {\r\n      name: IS_MILITARY_TIME,\r\n      validator: {\r\n        validate: (value, args): boolean => isMilitaryTime(value),\r\n        defaultMessage: buildMessage(\r\n          eachPrefix => eachPrefix + '$property must be a valid representation of military time in the format HH:MM',\r\n          validationOptions\r\n        ),\r\n      },\r\n    },\r\n    validationOptions\r\n  );\r\n}\r\n"]}