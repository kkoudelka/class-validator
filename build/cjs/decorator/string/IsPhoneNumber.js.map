{"version":3,"file":"IsPhoneNumber.js","sourceRoot":"","sources":["../../../../src/decorator/string/IsPhoneNumber.ts"],"names":[],"mappings":";;;AACA,qDAAgE;AAChE,yDAA4E;AAE/D,QAAA,eAAe,GAAG,eAAe,CAAC;AAE/C;;;;;;;GAOG;AACH,SAAgB,aAAa,CAAC,KAAa,EAAE,MAAoB;IAC/D,IAAI;QACF,MAAM,QAAQ,GAAG,8CAA0B,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC3D,MAAM,MAAM,GAAG,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,OAAO,EAAE,CAAC;QACnC,OAAO,CAAC,CAAC,MAAM,CAAC;KACjB;IAAC,OAAO,KAAK,EAAE;QACd,WAAW;QACX,OAAO,KAAK,CAAC;KACd;AACH,CAAC;AATD,sCASC;AAED;;;;;;GAMG;AACH,SAAgB,aAAa,CAAC,MAAoB,EAAE,iBAAqC;IACvF,OAAO,uBAAU,CACf;QACE,IAAI,EAAE,uBAAe;QACrB,WAAW,EAAE,CAAC,MAAM,CAAC;QACrB,SAAS,EAAE;YACT,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,EAAW,EAAE,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC7E,cAAc,EAAE,yBAAY,CAC1B,UAAU,CAAC,EAAE,CAAC,UAAU,GAAG,wCAAwC,EACnE,iBAAiB,CAClB;SACF;KACF,EACD,iBAAiB,CAClB,CAAC;AACJ,CAAC;AAfD,sCAeC","sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\r\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\r\nimport { parsePhoneNumberFromString, CountryCode } from 'libphonenumber-js';\r\n\r\nexport const IS_PHONE_NUMBER = 'isPhoneNumber';\r\n\r\n/**\r\n * Checks if the string is a valid phone number. To successfully validate any phone number the text must include\r\n * the intl. calling code, if the calling code wont be provided then the region must be set.\r\n *\r\n * @param value the potential phone number string to test\r\n * @param region 2 characters uppercase country code (e.g. DE, US, CH) for country specific validation.\r\n * If text doesn't start with the international calling code (e.g. +41), then you must set this parameter.\r\n */\r\nexport function isPhoneNumber(value: string, region?: CountryCode): boolean {\r\n  try {\r\n    const phoneNum = parsePhoneNumberFromString(value, region);\r\n    const result = phoneNum?.isValid();\r\n    return !!result;\r\n  } catch (error) {\r\n    // logging?\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if the string is a valid phone number. To successfully validate any phone number the text must include\r\n * the intl. calling code, if the calling code wont be provided then the region must be set.\r\n *\r\n * @param region 2 characters uppercase country code (e.g. DE, US, CH) for country specific validation.\r\n * If text doesn't start with the international calling code (e.g. +41), then you must set this parameter.\r\n */\r\nexport function IsPhoneNumber(region?: CountryCode, validationOptions?: ValidationOptions): PropertyDecorator {\r\n  return ValidateBy(\r\n    {\r\n      name: IS_PHONE_NUMBER,\r\n      constraints: [region],\r\n      validator: {\r\n        validate: (value, args): boolean => isPhoneNumber(value, args.constraints[0]),\r\n        defaultMessage: buildMessage(\r\n          eachPrefix => eachPrefix + '$property must be a valid phone number',\r\n          validationOptions\r\n        ),\r\n      },\r\n    },\r\n    validationOptions\r\n  );\r\n}\r\n"]}