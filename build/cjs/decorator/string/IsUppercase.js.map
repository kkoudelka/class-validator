{"version":3,"file":"IsUppercase.js","sourceRoot":"","sources":["../../../../src/decorator/string/IsUppercase.ts"],"names":[],"mappings":";;;;;;AACA,qDAAgE;AAChE,4EAA6D;AAEhD,QAAA,YAAY,GAAG,aAAa,CAAC;AAE1C;;;GAGG;AACH,SAAgB,WAAW,CAAC,KAAc;IACxC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,qBAAoB,CAAC,KAAK,CAAC,CAAC;AAClE,CAAC;AAFD,kCAEC;AAED;;;GAGG;AACH,SAAgB,WAAW,CAAC,iBAAqC;IAC/D,OAAO,uBAAU,CACf;QACE,IAAI,EAAE,oBAAY;QAClB,SAAS,EAAE;YACT,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,EAAW,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC;YACtD,cAAc,EAAE,yBAAY,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,GAAG,6BAA6B,EAAE,iBAAiB,CAAC;SAC1G;KACF,EACD,iBAAiB,CAClB,CAAC;AACJ,CAAC;AAXD,kCAWC","sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\r\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\r\nimport isUppercaseValidator from 'validator/lib/isUppercase';\r\n\r\nexport const IS_UPPERCASE = 'isUppercase';\r\n\r\n/**\r\n * Checks if the string is uppercase.\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function isUppercase(value: unknown): boolean {\r\n  return typeof value === 'string' && isUppercaseValidator(value);\r\n}\r\n\r\n/**\r\n * Checks if the string is uppercase.\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function IsUppercase(validationOptions?: ValidationOptions): PropertyDecorator {\r\n  return ValidateBy(\r\n    {\r\n      name: IS_UPPERCASE,\r\n      validator: {\r\n        validate: (value, args): boolean => isUppercase(value),\r\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be uppercase', validationOptions),\r\n      },\r\n    },\r\n    validationOptions\r\n  );\r\n}\r\n"]}