{"version":3,"file":"ValidationExecutor.js","sourceRoot":"","sources":["../../../src/validation/ValidationExecutor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Validator } from './Validator';\r\nimport { ValidationError } from './ValidationError';\r\nimport { ValidationMetadata } from '../metadata/ValidationMetadata';\r\nimport { ValidatorOptions } from './ValidatorOptions';\r\nimport { ValidationTypes } from './ValidationTypes';\r\nimport { ConstraintMetadata } from '../metadata/ConstraintMetadata';\r\nimport { ValidationArguments } from './ValidationArguments';\r\nimport { ValidationUtils } from './ValidationUtils';\r\nimport { isPromise, convertToArray } from '../utils';\r\nimport { getMetadataStorage } from '../metadata/MetadataStorage';\r\n\r\n/**\r\n * Executes validation over given object.\r\n */\r\nexport class ValidationExecutor {\r\n  // -------------------------------------------------------------------------\r\n  // Properties\r\n  // -------------------------------------------------------------------------\r\n\r\n  awaitingPromises: Promise<any>[] = [];\r\n  ignoreAsyncValidations: boolean = false;\r\n\r\n  // -------------------------------------------------------------------------\r\n  // Private Properties\r\n  // -------------------------------------------------------------------------\r\n\r\n  private metadataStorage = getMetadataStorage();\r\n\r\n  // -------------------------------------------------------------------------\r\n  // Constructor\r\n  // -------------------------------------------------------------------------\r\n\r\n  constructor(private validator: Validator, private validatorOptions?: ValidatorOptions) {}\r\n\r\n  // -------------------------------------------------------------------------\r\n  // Public Methods\r\n  // -------------------------------------------------------------------------\r\n\r\n  execute(object: object, targetSchema: string, validationErrors: ValidationError[]): void {\r\n    /**\r\n     * If there is no metadata registered it means possibly the dependencies are not flatterned and\r\n     * more than one instance is used.\r\n     *\r\n     * TODO: This needs proper handling, forcing to use the same container or some other proper solution.\r\n     */\r\n    if (!this.metadataStorage.hasValidationMetaData && this.validatorOptions?.enableDebugMessages === true) {\r\n      console.warn(\r\n        `No metadata found. There is more than once class-validator version installed probably. You need to flatten your dependencies.`\r\n      );\r\n    }\r\n\r\n    const groups = this.validatorOptions ? this.validatorOptions.groups : undefined;\r\n    const strictGroups = (this.validatorOptions && this.validatorOptions.strictGroups) || false;\r\n    const always = (this.validatorOptions && this.validatorOptions.always) || false;\r\n\r\n    const targetMetadatas = this.metadataStorage.getTargetValidationMetadatas(\r\n      object.constructor,\r\n      targetSchema,\r\n      always,\r\n      strictGroups,\r\n      groups\r\n    );\r\n    const groupedMetadatas = this.metadataStorage.groupByPropertyName(targetMetadatas);\r\n\r\n    if (this.validatorOptions && this.validatorOptions.forbidUnknownValues && !targetMetadatas.length) {\r\n      const validationError = new ValidationError();\r\n\r\n      if (\r\n        !this.validatorOptions ||\r\n        !this.validatorOptions.validationError ||\r\n        this.validatorOptions.validationError.target === undefined ||\r\n        this.validatorOptions.validationError.target === true\r\n      )\r\n        validationError.target = object;\r\n\r\n      validationError.value = undefined;\r\n      validationError.property = undefined;\r\n      validationError.children = [];\r\n      validationError.constraints = { unknownValue: 'an unknown value was passed to the validate function' };\r\n\r\n      validationErrors.push(validationError);\r\n\r\n      return;\r\n    }\r\n\r\n    if (this.validatorOptions && this.validatorOptions.whitelist)\r\n      this.whitelist(object, groupedMetadatas, validationErrors);\r\n\r\n    // General validation\r\n    Object.keys(groupedMetadatas).forEach(propertyName => {\r\n      const value = (object as any)[propertyName];\r\n      const definedMetadatas = groupedMetadatas[propertyName].filter(\r\n        metadata => metadata.type === ValidationTypes.IS_DEFINED\r\n      );\r\n      const metadatas = groupedMetadatas[propertyName].filter(\r\n        metadata => metadata.type !== ValidationTypes.IS_DEFINED && metadata.type !== ValidationTypes.WHITELIST\r\n      );\r\n\r\n      if (\r\n        value instanceof Promise &&\r\n        metadatas.find(metadata => metadata.type === ValidationTypes.PROMISE_VALIDATION)\r\n      ) {\r\n        this.awaitingPromises.push(\r\n          value.then(resolvedValue => {\r\n            this.performValidations(object, resolvedValue, propertyName, definedMetadatas, metadatas, validationErrors);\r\n          })\r\n        );\r\n      } else {\r\n        this.performValidations(object, value, propertyName, definedMetadatas, metadatas, validationErrors);\r\n      }\r\n    });\r\n  }\r\n\r\n  whitelist(\r\n    object: any,\r\n    groupedMetadatas: { [propertyName: string]: ValidationMetadata[] },\r\n    validationErrors: ValidationError[]\r\n  ): void {\r\n    const notAllowedProperties: string[] = [];\r\n\r\n    Object.keys(object).forEach(propertyName => {\r\n      // does this property have no metadata?\r\n      if (!groupedMetadatas[propertyName] || groupedMetadatas[propertyName].length === 0)\r\n        notAllowedProperties.push(propertyName);\r\n    });\r\n\r\n    if (notAllowedProperties.length > 0) {\r\n      if (this.validatorOptions && this.validatorOptions.forbidNonWhitelisted) {\r\n        // throw errors\r\n        notAllowedProperties.forEach(property => {\r\n          const validationError: ValidationError = this.generateValidationError(object, object[property], property);\r\n          validationError.constraints = { [ValidationTypes.WHITELIST]: `property ${property} should not exist` };\r\n          validationError.children = undefined;\r\n          validationErrors.push(validationError);\r\n        });\r\n      } else {\r\n        // strip non allowed properties\r\n        notAllowedProperties.forEach(property => delete object[property]);\r\n      }\r\n    }\r\n  }\r\n\r\n  stripEmptyErrors(errors: ValidationError[]): ValidationError[] {\r\n    return errors.filter(error => {\r\n      if (error.children) {\r\n        error.children = this.stripEmptyErrors(error.children);\r\n      }\r\n\r\n      if (Object.keys(error.constraints).length === 0) {\r\n        if (error.children.length === 0) {\r\n          return false;\r\n        } else {\r\n          delete error.constraints;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  // -------------------------------------------------------------------------\r\n  // Private Methods\r\n  // -------------------------------------------------------------------------\r\n\r\n  private performValidations(\r\n    object: any,\r\n    value: any,\r\n    propertyName: string,\r\n    definedMetadatas: ValidationMetadata[],\r\n    metadatas: ValidationMetadata[],\r\n    validationErrors: ValidationError[]\r\n  ): void {\r\n    const customValidationMetadatas = metadatas.filter(metadata => metadata.type === ValidationTypes.CUSTOM_VALIDATION);\r\n    const nestedValidationMetadatas = metadatas.filter(metadata => metadata.type === ValidationTypes.NESTED_VALIDATION);\r\n    const conditionalValidationMetadatas = metadatas.filter(\r\n      metadata => metadata.type === ValidationTypes.CONDITIONAL_VALIDATION\r\n    );\r\n\r\n    const validationError = this.generateValidationError(object, value, propertyName);\r\n    validationErrors.push(validationError);\r\n\r\n    const canValidate = this.conditionalValidations(object, value, conditionalValidationMetadatas);\r\n    if (!canValidate) {\r\n      return;\r\n    }\r\n\r\n    // handle IS_DEFINED validation type the special way - it should work no matter skipUndefinedProperties/skipMissingProperties is set or not\r\n    this.customValidations(object, value, definedMetadatas, validationError);\r\n    this.mapContexts(object, value, definedMetadatas, validationError);\r\n\r\n    if (value === undefined && this.validatorOptions && this.validatorOptions.skipUndefinedProperties === true) {\r\n      return;\r\n    }\r\n\r\n    if (value === null && this.validatorOptions && this.validatorOptions.skipNullProperties === true) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      (value === null || value === undefined) &&\r\n      this.validatorOptions &&\r\n      this.validatorOptions.skipMissingProperties === true\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    this.customValidations(object, value, customValidationMetadatas, validationError);\r\n    this.nestedValidations(value, nestedValidationMetadatas, validationError.children);\r\n\r\n    this.mapContexts(object, value, metadatas, validationError);\r\n    this.mapContexts(object, value, customValidationMetadatas, validationError);\r\n  }\r\n\r\n  private generateValidationError(object: object, value: any, propertyName: string): ValidationError {\r\n    const validationError = new ValidationError();\r\n\r\n    if (\r\n      !this.validatorOptions ||\r\n      !this.validatorOptions.validationError ||\r\n      this.validatorOptions.validationError.target === undefined ||\r\n      this.validatorOptions.validationError.target === true\r\n    )\r\n      validationError.target = object;\r\n\r\n    if (\r\n      !this.validatorOptions ||\r\n      !this.validatorOptions.validationError ||\r\n      this.validatorOptions.validationError.value === undefined ||\r\n      this.validatorOptions.validationError.value === true\r\n    )\r\n      validationError.value = value;\r\n\r\n    validationError.property = propertyName;\r\n    validationError.children = [];\r\n    validationError.constraints = {};\r\n\r\n    return validationError;\r\n  }\r\n\r\n  private conditionalValidations(object: object, value: any, metadatas: ValidationMetadata[]): ValidationMetadata[] {\r\n    return metadatas\r\n      .map(metadata => metadata.constraints[0](object, value))\r\n      .reduce((resultA, resultB) => resultA && resultB, true);\r\n  }\r\n\r\n  private customValidations(object: object, value: any, metadatas: ValidationMetadata[], error: ValidationError): void {\r\n    metadatas.forEach(metadata => {\r\n      this.metadataStorage.getTargetValidatorConstraints(metadata.constraintCls).forEach(customConstraintMetadata => {\r\n        if (customConstraintMetadata.async && this.ignoreAsyncValidations) return;\r\n        if (\r\n          this.validatorOptions &&\r\n          this.validatorOptions.stopAtFirstError &&\r\n          Object.keys(error.constraints || {}).length > 0\r\n        )\r\n          return;\r\n\r\n        const validationArguments: ValidationArguments = {\r\n          targetName: object.constructor ? (object.constructor as any).name : undefined,\r\n          property: metadata.propertyName,\r\n          object: object,\r\n          value: value,\r\n          constraints: metadata.constraints,\r\n        };\r\n\r\n        if (!metadata.each || !(value instanceof Array || value instanceof Set || value instanceof Map)) {\r\n          const validatedValue = customConstraintMetadata.instance.validate(value, validationArguments);\r\n          if (isPromise(validatedValue)) {\r\n            const promise = validatedValue.then(isValid => {\r\n              if (!isValid) {\r\n                const [type, message] = this.createValidationError(object, value, metadata, customConstraintMetadata);\r\n                error.constraints[type] = message;\r\n                if (metadata.context) {\r\n                  if (!error.contexts) {\r\n                    error.contexts = {};\r\n                  }\r\n                  error.contexts[type] = Object.assign(error.contexts[type] || {}, metadata.context);\r\n                }\r\n              }\r\n            });\r\n            this.awaitingPromises.push(promise);\r\n          } else {\r\n            if (!validatedValue) {\r\n              const [type, message] = this.createValidationError(object, value, metadata, customConstraintMetadata);\r\n              error.constraints[type] = message;\r\n            }\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        // convert set and map into array\r\n        const arrayValue = convertToArray(value);\r\n        // Validation needs to be applied to each array item\r\n        const validatedSubValues = arrayValue.map((subValue: any) =>\r\n          customConstraintMetadata.instance.validate(subValue, validationArguments)\r\n        );\r\n        const validationIsAsync = validatedSubValues.some((validatedSubValue: boolean | Promise<boolean>) =>\r\n          isPromise(validatedSubValue)\r\n        );\r\n\r\n        if (validationIsAsync) {\r\n          // Wrap plain values (if any) in promises, so that all are async\r\n          const asyncValidatedSubValues = validatedSubValues.map((validatedSubValue: boolean | Promise<boolean>) =>\r\n            isPromise(validatedSubValue) ? validatedSubValue : Promise.resolve(validatedSubValue)\r\n          );\r\n          const asyncValidationIsFinishedPromise = Promise.all(asyncValidatedSubValues).then(\r\n            (flatValidatedValues: boolean[]) => {\r\n              const validationResult = flatValidatedValues.every((isValid: boolean) => isValid);\r\n              if (!validationResult) {\r\n                const [type, message] = this.createValidationError(object, value, metadata, customConstraintMetadata);\r\n                error.constraints[type] = message;\r\n                if (metadata.context) {\r\n                  if (!error.contexts) {\r\n                    error.contexts = {};\r\n                  }\r\n                  error.contexts[type] = Object.assign(error.contexts[type] || {}, metadata.context);\r\n                }\r\n              }\r\n            }\r\n          );\r\n\r\n          this.awaitingPromises.push(asyncValidationIsFinishedPromise);\r\n\r\n          return;\r\n        }\r\n\r\n        const validationResult = validatedSubValues.every((isValid: boolean) => isValid);\r\n        if (!validationResult) {\r\n          const [type, message] = this.createValidationError(object, value, metadata, customConstraintMetadata);\r\n          error.constraints[type] = message;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private nestedValidations(value: any, metadatas: ValidationMetadata[], errors: ValidationError[]): void {\r\n    if (value === void 0) {\r\n      return;\r\n    }\r\n\r\n    metadatas.forEach(metadata => {\r\n      if (metadata.type !== ValidationTypes.NESTED_VALIDATION && metadata.type !== ValidationTypes.PROMISE_VALIDATION) {\r\n        return;\r\n      }\r\n\r\n      if (value instanceof Array || value instanceof Set || value instanceof Map) {\r\n        // Treats Set as an array - as index of Set value is value itself and it is common case to have Object as value\r\n        const arrayLikeValue = value instanceof Set ? Array.from(value) : value;\r\n        arrayLikeValue.forEach((subValue: any, index: any) => {\r\n          this.performValidations(value, subValue, index.toString(), [], metadatas, errors);\r\n        });\r\n      } else if (value instanceof Object) {\r\n        const targetSchema = typeof metadata.target === 'string' ? metadata.target : metadata.target.name;\r\n        this.execute(value, targetSchema, errors);\r\n      } else {\r\n        const error = new ValidationError();\r\n        error.value = value;\r\n        error.property = metadata.propertyName;\r\n        error.target = metadata.target as object;\r\n        const [type, message] = this.createValidationError(metadata.target as object, value, metadata);\r\n        error.constraints = {\r\n          [type]: message,\r\n        };\r\n        errors.push(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  private mapContexts(object: object, value: any, metadatas: ValidationMetadata[], error: ValidationError): void {\r\n    return metadatas.forEach(metadata => {\r\n      if (metadata.context) {\r\n        let customConstraint;\r\n        if (metadata.type === ValidationTypes.CUSTOM_VALIDATION) {\r\n          const customConstraints = this.metadataStorage.getTargetValidatorConstraints(metadata.constraintCls);\r\n          customConstraint = customConstraints[0];\r\n        }\r\n\r\n        const type = this.getConstraintType(metadata, customConstraint);\r\n\r\n        if (error.constraints[type]) {\r\n          if (!error.contexts) {\r\n            error.contexts = {};\r\n          }\r\n\r\n          error.contexts[type] = Object.assign(error.contexts[type] || {}, metadata.context);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private createValidationError(\r\n    object: object,\r\n    value: any,\r\n    metadata: ValidationMetadata,\r\n    customValidatorMetadata?: ConstraintMetadata\r\n  ): [string, string] {\r\n    const targetName = object.constructor ? (object.constructor as any).name : undefined;\r\n    const type = this.getConstraintType(metadata, customValidatorMetadata);\r\n    const validationArguments: ValidationArguments = {\r\n      targetName: targetName,\r\n      property: metadata.propertyName,\r\n      object: object,\r\n      value: value,\r\n      constraints: metadata.constraints,\r\n    };\r\n\r\n    let message = metadata.message || '';\r\n    if (\r\n      !metadata.message &&\r\n      (!this.validatorOptions || (this.validatorOptions && !this.validatorOptions.dismissDefaultMessages))\r\n    ) {\r\n      if (customValidatorMetadata && customValidatorMetadata.instance.defaultMessage instanceof Function) {\r\n        message = customValidatorMetadata.instance.defaultMessage(validationArguments);\r\n      }\r\n    }\r\n\r\n    const messageString = ValidationUtils.replaceMessageSpecialTokens(message, validationArguments);\r\n    return [type, messageString];\r\n  }\r\n\r\n  private getConstraintType(metadata: ValidationMetadata, customValidatorMetadata?: ConstraintMetadata): string {\r\n    const type = customValidatorMetadata && customValidatorMetadata.name ? customValidatorMetadata.name : metadata.type;\r\n    return type;\r\n  }\r\n}\r\n"]}