{"version":3,"file":"ValidationOptions.js","sourceRoot":"","sources":["../../../src/decorator/ValidationOptions.ts"],"names":[],"mappings":"AAiCA,MAAM,UAAU,mBAAmB,CAAC,GAAQ;IAC1C,IAAI,CAAC,GAAG,EAAE;QACR,OAAO,KAAK,CAAC;KACd;IACD,OAAO,MAAM,IAAI,GAAG,IAAI,SAAS,IAAI,GAAG,IAAI,QAAQ,IAAI,GAAG,IAAI,QAAQ,IAAI,GAAG,IAAI,SAAS,IAAI,GAAG,CAAC;AACrG,CAAC","sourcesContent":["import { ValidationArguments } from '../validation/ValidationArguments';\r\n\r\n/**\r\n * Options used to pass to validation decorators.\r\n */\r\nexport interface ValidationOptions {\r\n  /**\r\n   * Specifies if validated value is an array and each of its items must be validated.\r\n   */\r\n  each?: boolean;\r\n\r\n  /**\r\n   * Error message to be used on validation fail.\r\n   * Message can be either string or a function that returns a string.\r\n   */\r\n  message?: string | ((validationArguments: ValidationArguments) => string);\r\n\r\n  /**\r\n   * Validation groups used for this validation.\r\n   */\r\n  groups?: string[];\r\n\r\n  /**\r\n   * Indicates if validation must be performed always, no matter of validation groups used.\r\n   */\r\n  always?: boolean;\r\n\r\n  /*\r\n   * A transient set of data passed through to the validation result for response mapping\r\n   */\r\n  context?: any;\r\n}\r\n\r\nexport function isValidationOptions(val: any): val is ValidationOptions {\r\n  if (!val) {\r\n    return false;\r\n  }\r\n  return 'each' in val || 'message' in val || 'groups' in val || 'always' in val || 'context' in val;\r\n}\r\n"]}