{"version":3,"file":"IsHexadecimal.js","sourceRoot":"","sources":["../../../../src/decorator/string/IsHexadecimal.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAChE,OAAO,sBAAsB,MAAM,6BAA6B,CAAC;AAEjE,MAAM,CAAC,MAAM,cAAc,GAAG,eAAe,CAAC;AAE9C;;;GAGG;AACH,MAAM,UAAU,aAAa,CAAC,KAAc;IAC1C,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,sBAAsB,CAAC,KAAK,CAAC,CAAC;AACpE,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,aAAa,CAAC,iBAAqC;IACjE,OAAO,UAAU,CACf;QACE,IAAI,EAAE,cAAc;QACpB,SAAS,EAAE;YACT,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,EAAW,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC;YACxD,cAAc,EAAE,YAAY,CAC1B,UAAU,CAAC,EAAE,CAAC,UAAU,GAAG,wCAAwC,EACnE,iBAAiB,CAClB;SACF;KACF,EACD,iBAAiB,CAClB,CAAC;AACJ,CAAC","sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\r\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\r\nimport isHexadecimalValidator from 'validator/lib/isHexadecimal';\r\n\r\nexport const IS_HEXADECIMAL = 'isHexadecimal';\r\n\r\n/**\r\n * Checks if the string is a hexadecimal number.\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function isHexadecimal(value: unknown): boolean {\r\n  return typeof value === 'string' && isHexadecimalValidator(value);\r\n}\r\n\r\n/**\r\n * Checks if the string is a hexadecimal number.\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function IsHexadecimal(validationOptions?: ValidationOptions): PropertyDecorator {\r\n  return ValidateBy(\r\n    {\r\n      name: IS_HEXADECIMAL,\r\n      validator: {\r\n        validate: (value, args): boolean => isHexadecimal(value),\r\n        defaultMessage: buildMessage(\r\n          eachPrefix => eachPrefix + '$property must be a hexadecimal number',\r\n          validationOptions\r\n        ),\r\n      },\r\n    },\r\n    validationOptions\r\n  );\r\n}\r\n"]}