{"version":3,"file":"IsMultibyte.js","sourceRoot":"","sources":["../../../../src/decorator/string/IsMultibyte.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAChE,OAAO,oBAAoB,MAAM,2BAA2B,CAAC;AAE7D,MAAM,CAAC,MAAM,YAAY,GAAG,aAAa,CAAC;AAE1C;;;GAGG;AACH,MAAM,UAAU,WAAW,CAAC,KAAc;IACxC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC;AAClE,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,WAAW,CAAC,iBAAqC;IAC/D,OAAO,UAAU,CACf;QACE,IAAI,EAAE,YAAY;QAClB,SAAS,EAAE;YACT,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,EAAW,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC;YACtD,cAAc,EAAE,YAAY,CAC1B,UAAU,CAAC,EAAE,CAAC,UAAU,GAAG,oDAAoD,EAC/E,iBAAiB,CAClB;SACF;KACF,EACD,iBAAiB,CAClB,CAAC;AACJ,CAAC","sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\r\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\r\nimport isMultibyteValidator from 'validator/lib/isMultibyte';\r\n\r\nexport const IS_MULTIBYTE = 'isMultibyte';\r\n\r\n/**\r\n * Checks if the string contains one or more multibyte chars.\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function isMultibyte(value: unknown): boolean {\r\n  return typeof value === 'string' && isMultibyteValidator(value);\r\n}\r\n\r\n/**\r\n * Checks if the string contains one or more multibyte chars.\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function IsMultibyte(validationOptions?: ValidationOptions): PropertyDecorator {\r\n  return ValidateBy(\r\n    {\r\n      name: IS_MULTIBYTE,\r\n      validator: {\r\n        validate: (value, args): boolean => isMultibyte(value),\r\n        defaultMessage: buildMessage(\r\n          eachPrefix => eachPrefix + '$property must contain one or more multibyte chars',\r\n          validationOptions\r\n        ),\r\n      },\r\n    },\r\n    validationOptions\r\n  );\r\n}\r\n"]}