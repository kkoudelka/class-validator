{"version":3,"file":"Length.js","sourceRoot":"","sources":["../../../../src/decorator/string/Length.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAChE,OAAO,iBAAiB,MAAM,wBAAwB,CAAC;AAEvD,MAAM,CAAC,MAAM,SAAS,GAAG,UAAU,CAAC;AAEpC;;;GAGG;AACH,MAAM,UAAU,MAAM,CAAC,KAAc,EAAE,GAAW,EAAE,GAAY;IAC9D,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,iBAAiB,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;AAC7E,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,MAAM,CAAC,GAAW,EAAE,GAAY,EAAE,iBAAqC;IACrF,OAAO,UAAU,CACf;QACE,IAAI,EAAE,SAAS;QACf,WAAW,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;QACvB,SAAS,EAAE;YACT,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,EAAW,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC3F,cAAc,EAAE,YAAY,CAAC,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE;gBAChD,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC;gBACtF,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC;gBACtF,IAAI,WAAW,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;oBAC3E,OAAO,UAAU,GAAG,mEAAmE,CAAC;iBACzF;qBAAM,IAAI,WAAW,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE;oBACjE,OAAO,UAAU,GAAG,oEAAoE,CAAC;iBAC1F;gBACD,OAAO,CACL,UAAU;oBACV,6GAA6G,CAC9G,CAAC;YACJ,CAAC,EAAE,iBAAiB,CAAC;SACtB;KACF,EACD,iBAAiB,CAClB,CAAC;AACJ,CAAC","sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\r\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\r\nimport isLengthValidator from 'validator/lib/isLength';\r\n\r\nexport const IS_LENGTH = 'isLength';\r\n\r\n/**\r\n * Checks if the string's length falls in a range. Note: this function takes into account surrogate pairs.\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function length(value: unknown, min: number, max?: number): boolean {\r\n  return typeof value === 'string' && isLengthValidator(value, { min, max });\r\n}\r\n\r\n/**\r\n * Checks if the string's length falls in a range. Note: this function takes into account surrogate pairs.\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function Length(min: number, max?: number, validationOptions?: ValidationOptions): PropertyDecorator {\r\n  return ValidateBy(\r\n    {\r\n      name: IS_LENGTH,\r\n      constraints: [min, max],\r\n      validator: {\r\n        validate: (value, args): boolean => length(value, args.constraints[0], args.constraints[1]),\r\n        defaultMessage: buildMessage((eachPrefix, args) => {\r\n          const isMinLength = args.constraints[0] !== null && args.constraints[0] !== undefined;\r\n          const isMaxLength = args.constraints[1] !== null && args.constraints[1] !== undefined;\r\n          if (isMinLength && (!args.value || args.value.length < args.constraints[0])) {\r\n            return eachPrefix + '$property must be longer than or equal to $constraint1 characters';\r\n          } else if (isMaxLength && args.value.length > args.constraints[1]) {\r\n            return eachPrefix + '$property must be shorter than or equal to $constraint2 characters';\r\n          }\r\n          return (\r\n            eachPrefix +\r\n            '$property must be longer than or equal to $constraint1 and shorter than or equal to $constraint2 characters'\r\n          );\r\n        }, validationOptions),\r\n      },\r\n    },\r\n    validationOptions\r\n  );\r\n}\r\n"]}