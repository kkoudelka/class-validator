{"version":3,"file":"IsNumber.js","sourceRoot":"","sources":["../../../../src/decorator/typechecker/IsNumber.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAEhE,MAAM,CAAC,MAAM,SAAS,GAAG,UAAU,CAAC;AAWpC;;GAEG;AACH,MAAM,UAAU,QAAQ,CAAC,KAAc,EAAE,UAA2B,EAAE;IACpE,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO,KAAK,CAAC;KACd;IAED,IAAI,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,CAAC,QAAQ,EAAE;QAC7C,OAAO,OAAO,CAAC,aAAa,CAAC;KAC9B;IAED,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;QACvB,OAAO,OAAO,CAAC,QAAQ,CAAC;KACzB;IAED,IAAI,OAAO,CAAC,gBAAgB,KAAK,SAAS,EAAE;QAC1C,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,IAAI,KAAK,GAAG,CAAC,KAAK,CAAC,EAAE;YACnB,aAAa,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;SACvD;QACD,IAAI,aAAa,GAAG,OAAO,CAAC,gBAAgB,EAAE;YAC5C,OAAO,KAAK,CAAC;SACd;KACF;IAED,OAAO,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAChC,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,QAAQ,CAAC,UAA2B,EAAE,EAAE,iBAAqC;IAC3F,OAAO,UAAU,CACf;QACE,IAAI,EAAE,SAAS;QACf,WAAW,EAAE,CAAC,OAAO,CAAC;QACtB,SAAS,EAAE;YACT,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,EAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACxE,cAAc,EAAE,YAAY,CAC1B,UAAU,CAAC,EAAE,CAAC,UAAU,GAAG,oEAAoE,EAC/F,iBAAiB,CAClB;SACF;KACF,EACD,iBAAiB,CAClB,CAAC;AACJ,CAAC","sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\r\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\r\n\r\nexport const IS_NUMBER = 'isNumber';\r\n\r\n/**\r\n * Options to be passed to IsNumber decorator.\r\n */\r\nexport interface IsNumberOptions {\r\n  allowNaN?: boolean;\r\n  allowInfinity?: boolean;\r\n  maxDecimalPlaces?: number;\r\n}\r\n\r\n/**\r\n * Checks if a given value is a number.\r\n */\r\nexport function isNumber(value: unknown, options: IsNumberOptions = {}): boolean {\r\n  if (typeof value !== 'number') {\r\n    return false;\r\n  }\r\n\r\n  if (value === Infinity || value === -Infinity) {\r\n    return options.allowInfinity;\r\n  }\r\n\r\n  if (Number.isNaN(value)) {\r\n    return options.allowNaN;\r\n  }\r\n\r\n  if (options.maxDecimalPlaces !== undefined) {\r\n    let decimalPlaces = 0;\r\n    if (value % 1 !== 0) {\r\n      decimalPlaces = value.toString().split('.')[1].length;\r\n    }\r\n    if (decimalPlaces > options.maxDecimalPlaces) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return Number.isFinite(value);\r\n}\r\n\r\n/**\r\n * Checks if a value is a number.\r\n */\r\nexport function IsNumber(options: IsNumberOptions = {}, validationOptions?: ValidationOptions): PropertyDecorator {\r\n  return ValidateBy(\r\n    {\r\n      name: IS_NUMBER,\r\n      constraints: [options],\r\n      validator: {\r\n        validate: (value, args): boolean => isNumber(value, args.constraints[0]),\r\n        defaultMessage: buildMessage(\r\n          eachPrefix => eachPrefix + '$property must be a number conforming to the specified constraints',\r\n          validationOptions\r\n        ),\r\n      },\r\n    },\r\n    validationOptions\r\n  );\r\n}\r\n"]}