{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,kBAAkB,EAAE,MAAM,4BAA4B,CAAC;AAChE,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AACnD,OAAO,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAC;AAE/C,4EAA4E;AAC5E,oCAAoC;AACpC,4EAA4E;AAE5E,cAAc,aAAa,CAAC;AAC5B,cAAc,wBAAwB,CAAC;AACvC,cAAc,+BAA+B,CAAC;AAC9C,cAAc,2CAA2C,CAAC;AAC1D,cAAc,8BAA8B,CAAC;AAC7C,cAAc,+BAA+B,CAAC;AAC9C,cAAc,kCAAkC,CAAC;AACjD,cAAc,8BAA8B,CAAC;AAC7C,cAAc,wBAAwB,CAAC;AACvC,cAAc,sCAAsC,CAAC;AACrD,cAAc,sBAAsB,CAAC;AACrC,cAAc,4BAA4B,CAAC;AAoB3C;;GAEG;AACH,MAAM,UAAU,QAAQ,CACtB,kBAAmC,EACnC,yBAAqD,EACrD,qBAAwC;IAExC,IAAI,OAAO,kBAAkB,KAAK,QAAQ,EAAE;QAC1C,OAAO,gBAAgB,CAAC,SAAS,CAAC,CAAC,QAAQ,CACzC,kBAAkB,EAClB,yBAAmC,EACnC,qBAAqB,CACtB,CAAC;KACH;SAAM;QACL,OAAO,gBAAgB,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,kBAAkB,EAAE,yBAA6C,CAAC,CAAC;KAChH;AACH,CAAC;AAgBD;;GAEG;AACH,MAAM,UAAU,gBAAgB,CAC9B,kBAAmC,EACnC,yBAAqD,EACrD,qBAAwC;IAExC,IAAI,OAAO,kBAAkB,KAAK,QAAQ,EAAE;QAC1C,OAAO,gBAAgB,CAAC,SAAS,CAAC,CAAC,gBAAgB,CACjD,kBAAkB,EAClB,yBAAmC,EACnC,qBAAqB,CACtB,CAAC;KACH;SAAM;QACL,OAAO,gBAAgB,CAAC,SAAS,CAAC,CAAC,gBAAgB,CACjD,kBAAkB,EAClB,yBAA6C,CAC9C,CAAC;KACH;AACH,CAAC;AAoBD;;;;GAIG;AACH,MAAM,UAAU,YAAY,CAC1B,kBAAmC,EACnC,yBAAqD,EACrD,qBAAwC;IAExC,IAAI,OAAO,kBAAkB,KAAK,QAAQ,EAAE;QAC1C,OAAO,gBAAgB,CAAC,SAAS,CAAC,CAAC,YAAY,CAC7C,kBAAkB,EAClB,yBAAmC,EACnC,qBAAqB,CACtB,CAAC;KACH;SAAM;QACL,OAAO,gBAAgB,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,kBAAkB,EAAE,yBAA6C,CAAC,CAAC;KACpH;AACH,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,cAAc,CAAC,MAAwB;IACrD,kBAAkB,EAAE,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;AACnD,CAAC","sourcesContent":["import { ValidationError } from './validation/ValidationError';\r\nimport { ValidatorOptions } from './validation/ValidatorOptions';\r\nimport { ValidationSchema } from './validation-schema/ValidationSchema';\r\nimport { getMetadataStorage } from './metadata/MetadataStorage';\r\nimport { Validator } from './validation/Validator';\r\nimport { getFromContainer } from './container';\r\n\r\n// -------------------------------------------------------------------------\r\n// Export everything api users needs\r\n// -------------------------------------------------------------------------\r\n\r\nexport * from './container';\r\nexport * from './decorator/decorators';\r\nexport * from './decorator/ValidationOptions';\r\nexport * from './validation/ValidatorConstraintInterface';\r\nexport * from './validation/ValidationError';\r\nexport * from './validation/ValidatorOptions';\r\nexport * from './validation/ValidationArguments';\r\nexport * from './validation/ValidationTypes';\r\nexport * from './validation/Validator';\r\nexport * from './validation-schema/ValidationSchema';\r\nexport * from './register-decorator';\r\nexport * from './metadata/MetadataStorage';\r\n\r\n// -------------------------------------------------------------------------\r\n// Shortcut methods for api users\r\n// -------------------------------------------------------------------------\r\n\r\n/**\r\n * Validates given object.\r\n */\r\nexport function validate(object: object, validatorOptions?: ValidatorOptions): Promise<ValidationError[]>;\r\n\r\n/**\r\n * Validates given object by a given validation schema.\r\n */\r\nexport function validate(\r\n  schemaName: string,\r\n  object: object,\r\n  validatorOptions?: ValidatorOptions\r\n): Promise<ValidationError[]>;\r\n\r\n/**\r\n * Validates given object by object's decorators or given validation schema.\r\n */\r\nexport function validate(\r\n  schemaNameOrObject: object | string,\r\n  objectOrValidationOptions?: object | ValidatorOptions,\r\n  maybeValidatorOptions?: ValidatorOptions\r\n): Promise<ValidationError[]> {\r\n  if (typeof schemaNameOrObject === 'string') {\r\n    return getFromContainer(Validator).validate(\r\n      schemaNameOrObject,\r\n      objectOrValidationOptions as object,\r\n      maybeValidatorOptions\r\n    );\r\n  } else {\r\n    return getFromContainer(Validator).validate(schemaNameOrObject, objectOrValidationOptions as ValidatorOptions);\r\n  }\r\n}\r\n\r\n/**\r\n * Validates given object and reject on error.\r\n */\r\nexport function validateOrReject(object: object, validatorOptions?: ValidatorOptions): Promise<void>;\r\n\r\n/**\r\n * Validates given object by a given validation schema and reject on error.\r\n */\r\nexport function validateOrReject(\r\n  schemaName: string,\r\n  object: object,\r\n  validatorOptions?: ValidatorOptions\r\n): Promise<void>;\r\n\r\n/**\r\n * Validates given object by object's decorators or given validation schema and reject on error.\r\n */\r\nexport function validateOrReject(\r\n  schemaNameOrObject: object | string,\r\n  objectOrValidationOptions?: object | ValidatorOptions,\r\n  maybeValidatorOptions?: ValidatorOptions\r\n): Promise<void> {\r\n  if (typeof schemaNameOrObject === 'string') {\r\n    return getFromContainer(Validator).validateOrReject(\r\n      schemaNameOrObject,\r\n      objectOrValidationOptions as object,\r\n      maybeValidatorOptions\r\n    );\r\n  } else {\r\n    return getFromContainer(Validator).validateOrReject(\r\n      schemaNameOrObject,\r\n      objectOrValidationOptions as ValidatorOptions\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Performs sync validation of the given object.\r\n * Note that this method completely ignores async validations.\r\n * If you want to properly perform validation you need to call validate method instead.\r\n */\r\nexport function validateSync(object: object, validatorOptions?: ValidatorOptions): ValidationError[];\r\n\r\n/**\r\n * Validates given object by a given validation schema.\r\n * Note that this method completely ignores async validations.\r\n * If you want to properly perform validation you need to call validate method instead.\r\n */\r\nexport function validateSync(\r\n  schemaName: string,\r\n  object: object,\r\n  validatorOptions?: ValidatorOptions\r\n): ValidationError[];\r\n\r\n/**\r\n * Validates given object by object's decorators or given validation schema.\r\n * Note that this method completely ignores async validations.\r\n * If you want to properly perform validation you need to call validate method instead.\r\n */\r\nexport function validateSync(\r\n  schemaNameOrObject: object | string,\r\n  objectOrValidationOptions?: object | ValidatorOptions,\r\n  maybeValidatorOptions?: ValidatorOptions\r\n): ValidationError[] {\r\n  if (typeof schemaNameOrObject === 'string') {\r\n    return getFromContainer(Validator).validateSync(\r\n      schemaNameOrObject,\r\n      objectOrValidationOptions as object,\r\n      maybeValidatorOptions\r\n    );\r\n  } else {\r\n    return getFromContainer(Validator).validateSync(schemaNameOrObject, objectOrValidationOptions as ValidatorOptions);\r\n  }\r\n}\r\n\r\n/**\r\n * Registers a new validation schema.\r\n */\r\nexport function registerSchema(schema: ValidationSchema): void {\r\n  getMetadataStorage().addValidationSchema(schema);\r\n}\r\n"]}