{"version":3,"file":"container.js","sourceRoot":"","sources":["../../src/container.ts"],"names":[],"mappings":"AAeA;;;GAGG;AACH,IAAM,gBAAgB,GAAqE,IAAI;IAAC;QACtF,cAAS,GAAsC,EAAE,CAAC;IAU5D,CAAC;IATC,qBAAG,GAAH,UAAO,SAAsC;QAC3C,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,KAAK,SAAS,EAA3B,CAA2B,CAAC,CAAC;QAC5E,IAAI,CAAC,QAAQ,EAAE;YACb,QAAQ,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,SAAS,EAAE,EAAE,CAAC;YACxD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC/B;QAED,OAAO,QAAQ,CAAC,MAAM,CAAC;IACzB,CAAC;IACH,cAAC;AAAD,CAAC,AAX+F,IAW9F,EAAE,CAAC;AAEL,IAAI,aAA+E,CAAC;AACpF,IAAI,oBAAyC,CAAC;AAE9C;;GAEG;AACH,MAAM,UAAU,YAAY,CAAC,YAA0C,EAAE,OAA6B;IACpG,aAAa,GAAG,YAAY,CAAC;IAC7B,oBAAoB,GAAG,OAAO,CAAC;AACjC,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,gBAAgB,CAAI,SAAiD;IACnF,IAAI,aAAa,EAAE;QACjB,IAAI;YACF,IAAM,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAC9C,IAAI,QAAQ;gBAAE,OAAO,QAAQ,CAAC;YAE9B,IAAI,CAAC,oBAAoB,IAAI,CAAC,oBAAoB,CAAC,QAAQ;gBAAE,OAAO,QAAQ,CAAC;SAC9E;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,oBAAoB,IAAI,CAAC,oBAAoB,CAAC,gBAAgB;gBAAE,MAAM,KAAK,CAAC;SAClF;KACF;IACD,OAAO,gBAAgB,CAAC,GAAG,CAAI,SAAS,CAAC,CAAC;AAC5C,CAAC","sourcesContent":["/**\r\n * Container options.\r\n */\r\nexport interface UseContainerOptions {\r\n  /**\r\n   * If set to true, then default container will be used in the case if given container haven't returned anything.\r\n   */\r\n  fallback?: boolean;\r\n\r\n  /**\r\n   * If set to true, then default container will be used in the case if given container thrown an exception.\r\n   */\r\n  fallbackOnErrors?: boolean;\r\n}\r\n\r\n/**\r\n * Container to be used by this library for inversion control. If container was not implicitly set then by default\r\n * container simply creates a new instance of the given class.\r\n */\r\nconst defaultContainer: { get<T>(someClass: { new (...args: any[]): T } | Function): T } = new (class {\r\n  private instances: { type: Function; object: any }[] = [];\r\n  get<T>(someClass: { new (...args: any[]): T }): T {\r\n    let instance = this.instances.find(instance => instance.type === someClass);\r\n    if (!instance) {\r\n      instance = { type: someClass, object: new someClass() };\r\n      this.instances.push(instance);\r\n    }\r\n\r\n    return instance.object;\r\n  }\r\n})();\r\n\r\nlet userContainer: { get<T>(someClass: { new (...args: any[]): T } | Function): T };\r\nlet userContainerOptions: UseContainerOptions;\r\n\r\n/**\r\n * Sets container to be used by this library.\r\n */\r\nexport function useContainer(iocContainer: { get(someClass: any): any }, options?: UseContainerOptions): void {\r\n  userContainer = iocContainer;\r\n  userContainerOptions = options;\r\n}\r\n\r\n/**\r\n * Gets the IOC container used by this library.\r\n */\r\nexport function getFromContainer<T>(someClass: { new (...args: any[]): T } | Function): T {\r\n  if (userContainer) {\r\n    try {\r\n      const instance = userContainer.get(someClass);\r\n      if (instance) return instance;\r\n\r\n      if (!userContainerOptions || !userContainerOptions.fallback) return instance;\r\n    } catch (error) {\r\n      if (!userContainerOptions || !userContainerOptions.fallbackOnErrors) throw error;\r\n    }\r\n  }\r\n  return defaultContainer.get<T>(someClass);\r\n}\r\n"]}