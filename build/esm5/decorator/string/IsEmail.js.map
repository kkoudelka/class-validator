{"version":3,"file":"IsEmail.js","sourceRoot":"","sources":["../../../../src/decorator/string/IsEmail.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAChE,OAAO,gBAAgB,MAAM,uBAAuB,CAAC;AAGrD,MAAM,CAAC,IAAM,QAAQ,GAAG,SAAS,CAAC;AAElC;;;GAGG;AACH,MAAM,UAAU,OAAO,CAAC,KAAc,EAAE,OAAoC;IAC1E,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,gBAAgB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AACvE,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,OAAO,CACrB,OAAoC,EACpC,iBAAqC;IAErC,OAAO,UAAU,CACf;QACE,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,CAAC,OAAO,CAAC;QACtB,SAAS,EAAE;YACT,QAAQ,EAAE,UAAC,KAAK,EAAE,IAAI,IAAc,OAAA,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAnC,CAAmC;YACvE,cAAc,EAAE,YAAY,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,GAAG,4BAA4B,EAAzC,CAAyC,EAAE,iBAAiB,CAAC;SACzG;KACF,EACD,iBAAiB,CAClB,CAAC;AACJ,CAAC","sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\r\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\r\nimport isEmailValidator from 'validator/lib/isEmail';\r\nimport ValidatorJS from 'validator';\r\n\r\nexport const IS_EMAIL = 'isEmail';\r\n\r\n/**\r\n * Checks if the string is an email.\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function isEmail(value: unknown, options?: ValidatorJS.IsEmailOptions): boolean {\r\n  return typeof value === 'string' && isEmailValidator(value, options);\r\n}\r\n\r\n/**\r\n * Checks if the string is an email.\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function IsEmail(\r\n  options?: ValidatorJS.IsEmailOptions,\r\n  validationOptions?: ValidationOptions\r\n): PropertyDecorator {\r\n  return ValidateBy(\r\n    {\r\n      name: IS_EMAIL,\r\n      constraints: [options],\r\n      validator: {\r\n        validate: (value, args): boolean => isEmail(value, args.constraints[0]),\r\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be an email', validationOptions),\r\n      },\r\n    },\r\n    validationOptions\r\n  );\r\n}\r\n"]}