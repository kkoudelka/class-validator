{"version":3,"file":"IsEthereumAddress.js","sourceRoot":"","sources":["../../../../src/decorator/string/IsEthereumAddress.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAChE,OAAO,0BAA0B,MAAM,iCAAiC,CAAC;AAEzE,MAAM,CAAC,IAAM,mBAAmB,GAAG,mBAAmB,CAAC;AAEvD;;;GAGG;AACH,MAAM,UAAU,iBAAiB,CAAC,KAAc;IAC9C,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,0BAA0B,CAAC,KAAK,CAAC,CAAC;AACxE,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,iBAAiB,CAAC,iBAAqC;IACrE,OAAO,UAAU,CACf;QACE,IAAI,EAAE,mBAAmB;QACzB,SAAS,EAAE;YACT,QAAQ,EAAE,UAAC,KAAK,EAAE,IAAI,IAAc,OAAA,iBAAiB,CAAC,KAAK,CAAC,EAAxB,CAAwB;YAC5D,cAAc,EAAE,YAAY,CAC1B,UAAA,UAAU,IAAI,OAAA,UAAU,GAAG,uCAAuC,EAApD,CAAoD,EAClE,iBAAiB,CAClB;SACF;KACF,EACD,iBAAiB,CAClB,CAAC;AACJ,CAAC","sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\r\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\r\nimport isEthereumAddressValidator from 'validator/lib/isEthereumAddress';\r\n\r\nexport const IS_ETHEREUM_ADDRESS = 'isEthereumAddress';\r\n\r\n/**\r\n * Check if the string is an Ethereum address using basic regex. Does not validate address checksums.\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function isEthereumAddress(value: unknown): boolean {\r\n  return typeof value === 'string' && isEthereumAddressValidator(value);\r\n}\r\n\r\n/**\r\n * Check if the string is an Ethereum address using basic regex. Does not validate address checksums.\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function IsEthereumAddress(validationOptions?: ValidationOptions): PropertyDecorator {\r\n  return ValidateBy(\r\n    {\r\n      name: IS_ETHEREUM_ADDRESS,\r\n      validator: {\r\n        validate: (value, args): boolean => isEthereumAddress(value),\r\n        defaultMessage: buildMessage(\r\n          eachPrefix => eachPrefix + '$property must be an Ethereum address',\r\n          validationOptions\r\n        ),\r\n      },\r\n    },\r\n    validationOptions\r\n  );\r\n}\r\n"]}