{"version":3,"file":"IsJWT.js","sourceRoot":"","sources":["../../../../src/decorator/string/IsJWT.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAChE,OAAO,cAAc,MAAM,qBAAqB,CAAC;AAEjD,MAAM,CAAC,IAAM,MAAM,GAAG,OAAO,CAAC;AAE9B;;;GAGG;AACH,MAAM,UAAU,KAAK,CAAC,KAAc;IAClC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,cAAc,CAAC,KAAK,CAAC,CAAC;AAC5D,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,KAAK,CAAC,iBAAqC;IACzD,OAAO,UAAU,CACf;QACE,IAAI,EAAE,MAAM;QACZ,SAAS,EAAE;YACT,QAAQ,EAAE,UAAC,KAAK,EAAE,IAAI,IAAc,OAAA,KAAK,CAAC,KAAK,CAAC,EAAZ,CAAY;YAChD,cAAc,EAAE,YAAY,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,GAAG,gCAAgC,EAA7C,CAA6C,EAAE,iBAAiB,CAAC;SAC7G;KACF,EACD,iBAAiB,CAClB,CAAC;AACJ,CAAC","sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\r\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\r\nimport isJwtValidator from 'validator/lib/isJWT';\r\n\r\nexport const IS_JWT = 'isJwt';\r\n\r\n/**\r\n * Checks if the string is valid JWT token.\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function isJWT(value: unknown): boolean {\r\n  return typeof value === 'string' && isJwtValidator(value);\r\n}\r\n\r\n/**\r\n * Checks if the string is valid JWT token.\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function IsJWT(validationOptions?: ValidationOptions): PropertyDecorator {\r\n  return ValidateBy(\r\n    {\r\n      name: IS_JWT,\r\n      validator: {\r\n        validate: (value, args): boolean => isJWT(value),\r\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a jwt string', validationOptions),\r\n      },\r\n    },\r\n    validationOptions\r\n  );\r\n}\r\n"]}