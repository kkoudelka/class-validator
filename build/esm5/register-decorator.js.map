{"version":3,"file":"register-decorator.js","sourceRoot":"","sources":["../../src/register-decorator.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,+BAA+B,CAAC;AAEnE,OAAO,EAAE,kBAAkB,EAAE,MAAM,+BAA+B,CAAC;AAEnE,OAAO,EAAE,eAAe,EAAE,MAAM,8BAA8B,CAAC;AAE/D,OAAO,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAC;AAC/C,OAAO,EAAE,eAAe,EAAE,kBAAkB,EAAE,MAAM,4BAA4B,CAAC;AAwCjF;;GAEG;AACH,MAAM,UAAU,iBAAiB,CAAC,OAAmC;IACnE,IAAI,aAAuB,CAAC;IAC5B,IAAI,OAAO,CAAC,SAAS,YAAY,QAAQ,EAAE;QACzC,aAAa,GAAG,OAAO,CAAC,SAAS,CAAC;QAClC,IAAM,iBAAiB,GAAG,gBAAgB,CAAC,eAAe,CAAC,CAAC,6BAA6B,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAC7G,IAAI,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;YAChC,MAAM,0FAAwF,OAAO,CAAC,MAAM,CAAC,IAAI,SAAI,OAAO,CAAC,YAAc,CAAC;SAC7I;KACF;SAAM;QACL,IAAM,WAAS,GAAG,OAAO,CAAC,SAAS,CAAC;QACpC,aAAa;YAAG;YAYhB,CAAC;YAXC,mCAAQ,GAAR,UAAS,KAAU,EAAE,mBAAyC;gBAC5D,OAAO,WAAS,CAAC,QAAQ,CAAC,KAAK,EAAE,mBAAmB,CAAC,CAAC;YACxD,CAAC;YAED,yCAAc,GAAd,UAAe,mBAAyC;gBACtD,IAAI,WAAS,CAAC,cAAc,EAAE;oBAC5B,OAAO,WAAS,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;iBACtD;gBAED,OAAO,EAAE,CAAC;YACZ,CAAC;YACH,uBAAC;QAAD,CAAC,AAZe,GAYf,CAAC;QACF,kBAAkB,EAAE,CAAC,qBAAqB,CAAC,IAAI,kBAAkB,CAAC,aAAa,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;KAChH;IAED,IAAM,sBAAsB,GAA2B;QACrD,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,eAAe,CAAC,iBAAiB;QAC9G,MAAM,EAAE,OAAO,CAAC,MAAM;QACtB,YAAY,EAAE,OAAO,CAAC,YAAY;QAClC,iBAAiB,EAAE,OAAO,CAAC,OAAO;QAClC,aAAa,EAAE,aAAa;QAC5B,WAAW,EAAE,OAAO,CAAC,WAAW;KACjC,CAAC;IACF,kBAAkB,EAAE,CAAC,qBAAqB,CAAC,IAAI,kBAAkB,CAAC,sBAAsB,CAAC,CAAC,CAAC;AAC7F,CAAC","sourcesContent":["import { ConstraintMetadata } from './metadata/ConstraintMetadata';\r\nimport { ValidatorConstraintInterface } from './validation/ValidatorConstraintInterface';\r\nimport { ValidationMetadata } from './metadata/ValidationMetadata';\r\nimport { ValidationMetadataArgs } from './metadata/ValidationMetadataArgs';\r\nimport { ValidationTypes } from './validation/ValidationTypes';\r\nimport { ValidationArguments } from './validation/ValidationArguments';\r\nimport { getFromContainer } from './container';\r\nimport { MetadataStorage, getMetadataStorage } from './metadata/MetadataStorage';\r\nimport { ValidationOptions } from './decorator/ValidationOptions';\r\n\r\nexport interface ValidationDecoratorOptions {\r\n  /**\r\n   * Target object to be validated.\r\n   */\r\n  target: Function;\r\n\r\n  /**\r\n   * Target object's property name to be validated.\r\n   */\r\n  propertyName: string;\r\n\r\n  /**\r\n   * Name of the validation that is being registered.\r\n   */\r\n  name?: string;\r\n\r\n  /**\r\n   * Indicates if this decorator will perform async validation.\r\n   */\r\n  async?: boolean;\r\n\r\n  /**\r\n   * Validator options.\r\n   */\r\n  options?: ValidationOptions;\r\n\r\n  /**\r\n   * Array of validation constraints.\r\n   */\r\n  constraints?: any[];\r\n\r\n  /**\r\n   * Validator that performs validation.\r\n   */\r\n  validator: ValidatorConstraintInterface | Function;\r\n}\r\n\r\n/**\r\n * Registers a custom validation decorator.\r\n */\r\nexport function registerDecorator(options: ValidationDecoratorOptions): void {\r\n  let constraintCls: Function;\r\n  if (options.validator instanceof Function) {\r\n    constraintCls = options.validator;\r\n    const constraintClasses = getFromContainer(MetadataStorage).getTargetValidatorConstraints(options.validator);\r\n    if (constraintClasses.length > 1) {\r\n      throw `More than one implementation of ValidatorConstraintInterface found for validator on: ${options.target.name}:${options.propertyName}`;\r\n    }\r\n  } else {\r\n    const validator = options.validator;\r\n    constraintCls = class CustomConstraint implements ValidatorConstraintInterface {\r\n      validate(value: any, validationArguments?: ValidationArguments): Promise<boolean> | boolean {\r\n        return validator.validate(value, validationArguments);\r\n      }\r\n\r\n      defaultMessage(validationArguments?: ValidationArguments): string {\r\n        if (validator.defaultMessage) {\r\n          return validator.defaultMessage(validationArguments);\r\n        }\r\n\r\n        return '';\r\n      }\r\n    };\r\n    getMetadataStorage().addConstraintMetadata(new ConstraintMetadata(constraintCls, options.name, options.async));\r\n  }\r\n\r\n  const validationMetadataArgs: ValidationMetadataArgs = {\r\n    type: options.name && ValidationTypes.isValid(options.name) ? options.name : ValidationTypes.CUSTOM_VALIDATION,\r\n    target: options.target,\r\n    propertyName: options.propertyName,\r\n    validationOptions: options.options,\r\n    constraintCls: constraintCls,\r\n    constraints: options.constraints,\r\n  };\r\n  getMetadataStorage().addValidationMetadata(new ValidationMetadata(validationMetadataArgs));\r\n}\r\n"]}