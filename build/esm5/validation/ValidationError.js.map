{"version":3,"file":"ValidationError.js","sourceRoot":"","sources":["../../../src/validation/ValidationError.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH;IAAA;IAgFA,CAAC;IAzCC;;;;;OAKG;IACH,kCAAQ,GAAR,UAAS,cAA+B,EAAE,SAA0B,EAAE,UAAuB;QAA7F,iBAkCC;QAlCQ,+BAAA,EAAA,sBAA+B;QAAE,0BAAA,EAAA,iBAA0B;QAAE,2BAAA,EAAA,eAAuB;QAC3F,IAAM,SAAS,GAAG,cAAc,CAAC,CAAC,CAAC,WAAS,CAAC,CAAC,CAAC,EAAE,CAAC;QAClD,IAAM,OAAO,GAAG,cAAc,CAAC,CAAC,CAAC,YAAU,CAAC,CAAC,CAAC,EAAE,CAAC;QACjD,IAAM,oBAAoB,GAAG,UAAC,YAAoB;YAChD,OAAA,iBAAe,SAAS,GAAG,UAAU,GAAG,YAAY,GAAG,OAAO,+CAA0C,SAAS,GAAG,MAAM,CAAC,IAAI,CAC7H,KAAI,CAAC,WAAW,CACjB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,OAAO,QAAK;QAF3B,CAE2B,CAAC;QAE9B,IAAI,CAAC,SAAS,EAAE;YACd,OAAO,CACL,oBAAkB,SAAS,IACzB,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,IACvD,OAAO,kCAA+B;gBACzC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC7D,CAAC,IAAI,CAAC,QAAQ;oBACZ,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,QAAQ,CAAC,cAAc,EAAE,IAAI,EAAE,KAAI,CAAC,QAAQ,CAAC,EAAxD,CAAwD,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;oBACpG,CAAC,CAAC,EAAE,CAAC,CACR,CAAC;SACH;aAAM;YACL,6DAA6D;YAC7D,IAAM,mBAAiB,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;gBACxD,CAAC,CAAC,MAAI,IAAI,CAAC,QAAQ,MAAG;gBACtB,CAAC,CAAC,MAAG,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAG,IAAI,CAAC,QAAU,CAAC;YAE/C,IAAI,IAAI,CAAC,WAAW,EAAE;gBACpB,OAAO,oBAAoB,CAAC,mBAAiB,CAAC,CAAC;aAChD;iBAAM;gBACL,OAAO,IAAI,CAAC,QAAQ;oBAClB,CAAC,CAAC,IAAI,CAAC,QAAQ;yBACV,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,QAAQ,CAAC,cAAc,EAAE,IAAI,EAAE,KAAG,UAAU,GAAG,mBAAmB,CAAC,EAA9E,CAA8E,CAAC;yBACjG,IAAI,CAAC,EAAE,CAAC;oBACb,CAAC,CAAC,EAAE,CAAC;aACR;SACF;IACH,CAAC;IACH,sBAAC;AAAD,CAAC,AAhFD,IAgFC","sourcesContent":["/**\r\n * Validation error description.\r\n */\r\nexport class ValidationError {\r\n  /**\r\n   * Object that was validated.\r\n   *\r\n   * OPTIONAL - configurable via the ValidatorOptions.validationError.target option\r\n   */\r\n  target?: object;\r\n\r\n  /**\r\n   * Object's property that haven't pass validation.\r\n   */\r\n  property: string;\r\n\r\n  /**\r\n   * Value that haven't pass a validation.\r\n   *\r\n   * OPTIONAL - configurable via the ValidatorOptions.validationError.value option\r\n   */\r\n  value?: any;\r\n\r\n  /**\r\n   * Constraints that failed validation with error messages.\r\n   */\r\n  constraints?: {\r\n    [type: string]: string;\r\n  };\r\n\r\n  /**\r\n   * Contains all nested validation errors of the property.\r\n   */\r\n  children?: ValidationError[];\r\n\r\n  /*\r\n   * A transient set of data passed through to the validation result for response mapping\r\n   */\r\n  contexts?: {\r\n    [type: string]: any;\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param shouldDecorate decorate the message with ANSI formatter escape codes for better readability\r\n   * @param hasParent true when the error is a child of an another one\r\n   * @param parentPath path as string to the parent of this property\r\n   */\r\n  toString(shouldDecorate: boolean = false, hasParent: boolean = false, parentPath: string = ``): string {\r\n    const boldStart = shouldDecorate ? `\\x1b[1m` : ``;\r\n    const boldEnd = shouldDecorate ? `\\x1b[22m` : ``;\r\n    const propConstraintFailed = (propertyName: string): string =>\r\n      ` - property ${boldStart}${parentPath}${propertyName}${boldEnd} has failed the following constraints: ${boldStart}${Object.keys(\r\n        this.constraints\r\n      ).join(`, `)}${boldEnd} \\n`;\r\n\r\n    if (!hasParent) {\r\n      return (\r\n        `An instance of ${boldStart}${\r\n          this.target ? this.target.constructor.name : 'an object'\r\n        }${boldEnd} has failed the validation:\\n` +\r\n        (this.constraints ? propConstraintFailed(this.property) : ``) +\r\n        (this.children\r\n          ? this.children.map(childError => childError.toString(shouldDecorate, true, this.property)).join(``)\r\n          : ``)\r\n      );\r\n    } else {\r\n      // we format numbers as array indexes for better readability.\r\n      const formattedProperty = Number.isInteger(+this.property)\r\n        ? `[${this.property}]`\r\n        : `${parentPath ? `.` : ``}${this.property}`;\r\n\r\n      if (this.constraints) {\r\n        return propConstraintFailed(formattedProperty);\r\n      } else {\r\n        return this.children\r\n          ? this.children\r\n              .map(childError => childError.toString(shouldDecorate, true, `${parentPath}${formattedProperty}`))\r\n              .join(``)\r\n          : ``;\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}