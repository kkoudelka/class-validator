{"version":3,"file":"ValidationUtils.js","sourceRoot":"","sources":["../../../src/validation/ValidationUtils.ts"],"names":[],"mappings":"AAEA;;GAEG;AACH,MAAM,UAAU,kBAAkB,CAAC,UAAmB;IACpD,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;QAC7B,OAAO,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC9B;IAED,OAAO,KAAG,UAAY,CAAC;AACzB,CAAC;AAED;IAAA;IAiCA,CAAC;IAhCQ,2CAA2B,GAAlC,UACE,OAAyD,EACzD,mBAAwC;QAExC,IAAI,aAAqB,CAAC;QAC1B,IAAI,OAAO,YAAY,QAAQ,EAAE;YAC/B,aAAa,GAAI,OAAiD,CAAC,mBAAmB,CAAC,CAAC;SACzF;aAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YACtC,aAAa,GAAG,OAAO,CAAC;SACzB;QAED,IAAI,aAAa,IAAI,mBAAmB,CAAC,WAAW,YAAY,KAAK,EAAE;YACrE,mBAAmB,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,UAAU,EAAE,KAAK;gBACxD,aAAa,GAAG,aAAa,CAAC,OAAO,CACnC,IAAI,MAAM,CAAC,mBAAgB,KAAK,GAAG,CAAC,CAAE,EAAE,GAAG,CAAC,EAC5C,kBAAkB,CAAC,UAAU,CAAC,CAC/B,CAAC;YACJ,CAAC,CAAC,CAAC;SACJ;QAED,IACE,aAAa;YACb,mBAAmB,CAAC,KAAK,KAAK,SAAS;YACvC,mBAAmB,CAAC,KAAK,KAAK,IAAI;YAClC,OAAO,mBAAmB,CAAC,KAAK,KAAK,QAAQ;YAE7C,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC,UAAU,EAAE,mBAAmB,CAAC,KAAK,CAAC,CAAC;QAC/E,IAAI,aAAa;YAAE,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC,aAAa,EAAE,mBAAmB,CAAC,QAAQ,CAAC,CAAC;QACtG,IAAI,aAAa;YAAE,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC,WAAW,EAAE,mBAAmB,CAAC,UAAU,CAAC,CAAC;QAEtG,OAAO,aAAa,CAAC;IACvB,CAAC;IACH,sBAAC;AAAD,CAAC,AAjCD,IAiCC","sourcesContent":["import { ValidationArguments } from './ValidationArguments';\r\n\r\n/**\r\n * Convert the constraint to a string to be shown in an error\r\n */\r\nexport function constraintToString(constraint: unknown): string {\r\n  if (Array.isArray(constraint)) {\r\n    return constraint.join(', ');\r\n  }\r\n\r\n  return `${constraint}`;\r\n}\r\n\r\nexport class ValidationUtils {\r\n  static replaceMessageSpecialTokens(\r\n    message: string | ((args: ValidationArguments) => string),\r\n    validationArguments: ValidationArguments\r\n  ): string {\r\n    let messageString: string;\r\n    if (message instanceof Function) {\r\n      messageString = (message as (args: ValidationArguments) => string)(validationArguments);\r\n    } else if (typeof message === 'string') {\r\n      messageString = message;\r\n    }\r\n\r\n    if (messageString && validationArguments.constraints instanceof Array) {\r\n      validationArguments.constraints.forEach((constraint, index) => {\r\n        messageString = messageString.replace(\r\n          new RegExp(`\\\\$constraint${index + 1}`, 'g'),\r\n          constraintToString(constraint)\r\n        );\r\n      });\r\n    }\r\n\r\n    if (\r\n      messageString &&\r\n      validationArguments.value !== undefined &&\r\n      validationArguments.value !== null &&\r\n      typeof validationArguments.value === 'string'\r\n    )\r\n      messageString = messageString.replace(/\\$value/g, validationArguments.value);\r\n    if (messageString) messageString = messageString.replace(/\\$property/g, validationArguments.property);\r\n    if (messageString) messageString = messageString.replace(/\\$target/g, validationArguments.targetName);\r\n\r\n    return messageString;\r\n  }\r\n}\r\n"]}