{"version":3,"file":"Validator.js","sourceRoot":"","sources":["../../../src/validation/Validator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAG1D;;GAEG;AACH;IAAA;IAwGA,CAAC;IAzFC;;OAEG;IACH,4BAAQ,GAAR,UACE,kBAAmC,EACnC,yBAAqD,EACrD,qBAAwC;QAExC,OAAO,IAAI,CAAC,YAAY,CAAC,kBAAkB,EAAE,yBAAyB,EAAE,qBAAqB,CAAC,CAAC;IACjG,CAAC;IAYD;;OAEG;IACG,oCAAgB,GAAtB,UACE,kBAAmC,EACnC,yBAAqD,EACrD,qBAAwC;;;;;4BAEzB,qBAAM,IAAI,CAAC,YAAY,CAAC,kBAAkB,EAAE,yBAAyB,EAAE,qBAAqB,CAAC,EAAA;;wBAAtG,MAAM,GAAG,SAA6F;wBAC5G,IAAI,MAAM,CAAC,MAAM;4BAAE,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAC;;;;;KAClD;IAaD;;OAEG;IACH,gCAAY,GAAZ,UACE,kBAAmC,EACnC,yBAAqD,EACrD,qBAAwC;QAExC,IAAM,MAAM,GAAG,OAAO,kBAAkB,KAAK,QAAQ,CAAC,CAAC,CAAE,yBAAoC,CAAC,CAAC,CAAC,kBAAkB,CAAC;QACnH,IAAM,OAAO,GACX,OAAO,kBAAkB,KAAK,QAAQ,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAE,yBAA+C,CAAC;QACpH,IAAM,MAAM,GAAG,OAAO,kBAAkB,KAAK,QAAQ,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,SAAS,CAAC;QAEvF,IAAM,QAAQ,GAAG,IAAI,kBAAkB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QACvD,QAAQ,CAAC,sBAAsB,GAAG,IAAI,CAAC;QACvC,IAAM,gBAAgB,GAAsB,EAAE,CAAC;QAC/C,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC;QACnD,OAAO,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;IACrD,CAAC;IAED,4EAA4E;IAC5E,qBAAqB;IACrB,4EAA4E;IAC5E;;;OAGG;IACK,gCAAY,GAApB,UACE,kBAAmC,EACnC,yBAAqD,EACrD,qBAAwC;QAExC,IAAM,MAAM,GAAG,OAAO,kBAAkB,KAAK,QAAQ,CAAC,CAAC,CAAE,yBAAoC,CAAC,CAAC,CAAC,kBAAkB,CAAC;QACnH,IAAM,OAAO,GACX,OAAO,kBAAkB,KAAK,QAAQ,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAE,yBAA+C,CAAC;QACpH,IAAM,MAAM,GAAG,OAAO,kBAAkB,KAAK,QAAQ,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,SAAS,CAAC;QAEvF,IAAM,QAAQ,GAAG,IAAI,kBAAkB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QACvD,IAAM,gBAAgB,GAAsB,EAAE,CAAC;QAC/C,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC;QAEnD,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC;YACjD,OAAO,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC;IACH,gBAAC;AAAD,CAAC,AAxGD,IAwGC","sourcesContent":["import { ValidationError } from './ValidationError';\r\nimport { ValidatorOptions } from './ValidatorOptions';\r\nimport { ValidationExecutor } from './ValidationExecutor';\r\nimport { ValidationOptions } from '../decorator/ValidationOptions';\r\n\r\n/**\r\n * Validator performs validation of the given object based on its metadata.\r\n */\r\nexport class Validator {\r\n  // -------------------------------------------------------------------------\r\n  // Public Methods\r\n  // -------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Performs validation of the given object based on decorators used in given object class.\r\n   */\r\n  validate(object: object, options?: ValidatorOptions): Promise<ValidationError[]>;\r\n\r\n  /**\r\n   * Performs validation of the given object based on validation schema.\r\n   */\r\n  validate(schemaName: string, object: object, options?: ValidatorOptions): Promise<ValidationError[]>;\r\n\r\n  /**\r\n   * Performs validation of the given object based on decorators or validation schema.\r\n   */\r\n  validate(\r\n    objectOrSchemaName: object | string,\r\n    objectOrValidationOptions: object | ValidationOptions,\r\n    maybeValidatorOptions?: ValidatorOptions\r\n  ): Promise<ValidationError[]> {\r\n    return this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);\r\n  }\r\n\r\n  /**\r\n   * Performs validation of the given object based on decorators used in given object class and reject on error.\r\n   */\r\n  validateOrReject(object: object, options?: ValidatorOptions): Promise<void>;\r\n\r\n  /**\r\n   * Performs validation of the given object based on validation schema and reject on error.\r\n   */\r\n  validateOrReject(schemaName: string, object: object, options?: ValidatorOptions): Promise<void>;\r\n\r\n  /**\r\n   * Performs validation of the given object based on decorators or validation schema and reject on error.\r\n   */\r\n  async validateOrReject(\r\n    objectOrSchemaName: object | string,\r\n    objectOrValidationOptions: object | ValidationOptions,\r\n    maybeValidatorOptions?: ValidatorOptions\r\n  ): Promise<void> {\r\n    const errors = await this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);\r\n    if (errors.length) return Promise.reject(errors);\r\n  }\r\n\r\n  /**\r\n   * Performs validation of the given object based on decorators used in given object class.\r\n   * NOTE: This method completely ignores all async validations.\r\n   */\r\n  validateSync(object: object, options?: ValidatorOptions): ValidationError[];\r\n\r\n  /**\r\n   * Performs validation of the given object based on validation schema.\r\n   */\r\n  validateSync(schemaName: string, object: object, options?: ValidatorOptions): ValidationError[];\r\n\r\n  /**\r\n   * Performs validation of the given object based on decorators or validation schema.\r\n   */\r\n  validateSync(\r\n    objectOrSchemaName: object | string,\r\n    objectOrValidationOptions: object | ValidationOptions,\r\n    maybeValidatorOptions?: ValidatorOptions\r\n  ): ValidationError[] {\r\n    const object = typeof objectOrSchemaName === 'string' ? (objectOrValidationOptions as object) : objectOrSchemaName;\r\n    const options =\r\n      typeof objectOrSchemaName === 'string' ? maybeValidatorOptions : (objectOrValidationOptions as ValidationOptions);\r\n    const schema = typeof objectOrSchemaName === 'string' ? objectOrSchemaName : undefined;\r\n\r\n    const executor = new ValidationExecutor(this, options);\r\n    executor.ignoreAsyncValidations = true;\r\n    const validationErrors: ValidationError[] = [];\r\n    executor.execute(object, schema, validationErrors);\r\n    return executor.stripEmptyErrors(validationErrors);\r\n  }\r\n\r\n  // -------------------------------------------------------------------------\r\n  // Private Properties\r\n  // -------------------------------------------------------------------------\r\n  /**\r\n   * Performs validation of the given object based on decorators or validation schema.\r\n   * Common method for `validateOrReject` and `validate` methods.\r\n   */\r\n  private coreValidate(\r\n    objectOrSchemaName: object | string,\r\n    objectOrValidationOptions: object | ValidationOptions,\r\n    maybeValidatorOptions?: ValidatorOptions\r\n  ): Promise<ValidationError[]> {\r\n    const object = typeof objectOrSchemaName === 'string' ? (objectOrValidationOptions as object) : objectOrSchemaName;\r\n    const options =\r\n      typeof objectOrSchemaName === 'string' ? maybeValidatorOptions : (objectOrValidationOptions as ValidationOptions);\r\n    const schema = typeof objectOrSchemaName === 'string' ? objectOrSchemaName : undefined;\r\n\r\n    const executor = new ValidationExecutor(this, options);\r\n    const validationErrors: ValidationError[] = [];\r\n    executor.execute(object, schema, validationErrors);\r\n\r\n    return Promise.all(executor.awaitingPromises).then(() => {\r\n      return executor.stripEmptyErrors(validationErrors);\r\n    });\r\n  }\r\n}\r\n"]}